/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * Copyright 2020-2024 The JReleaser authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
    id 'org.jreleaser.jdks'
}

config {
    info {
        description = 'app'
        inceptionYear = '2020'
        tags = ['app']

        links {
            website      = "https://github.com/jreleaser/${project.rootProject.name}"
            issueTracker = "https://github.com/jreleaser/${project.rootProject.name}/issues"
            scm          = "https://github.com/jreleaser/${project.rootProject.name}.git"
        }

        scm {
            url                 = "https://github.com/jreleaser/${project.rootProject.name}"
            connection          = "scm:git:https://github.com/jreleaser/${project.rootProject.name}.git"
            developerConnection = "scm:git:git@github.com:jreleaser/${project.rootProject.name}.git"
        }

        specification {
            enabled = true
        }

        implementation {
            enabled = true
        }
    }

    docs {
        javadoc {
            autoLinks {
                enabled = false
            }
        }
    }
}

jdks {
    zulu17Linux {
        platform = 'linux-x86_64'
        url = 'https://cdn.azul.com/zulu/bin/zulu17.50.19-ca-jdk17.0.11-linux_x64.zip'
        checksum = 'c89977771091eb7d53e0f244a722076e88d968966b75aba2a65a1b31105d68bb'
    }
    zulu17LinuxArm {
        platform = 'linux-aarch64'
        url = 'https://cdn.azul.com/zulu/bin/zulu17.50.19-ca-jdk17.0.11-linux_aarch64.tar.gz'
        checksum = '518cc455c0c7b49c0ae7d809c0bb87ab371bb850d46abb8efad5010c6a06faec'
    }
    zulu17LinuxMusl {
        platform = 'linux_musl-x86_64'
        url = 'https://cdn.azul.com/zulu/bin/zulu17.50.19-ca-jdk17.0.11-linux_musl_x64.tar.gz'
        checksum = '22bbde6e05ced1238b302e2b44d3f9785c23e4115618eea83786b6b4a1828f9f'
    }
    zulu17LinuxMuslArm {
        platform = 'linux_musl-aarch64'
        url = 'https://cdn.azul.com/zulu/bin/zulu17.50.19-ca-jdk17.0.11-linux_musl_aarch64.tar.gz'
        checksum = 'fc6645aa46736e6100302c109127ea31a1d1192599b7140dd94f81eaeebfe293'
    }
    zulu17Windows {
        platform = 'windows-x86_64'
        url = 'https://cdn.azul.com/zulu/bin/zulu17.50.19-ca-jdk17.0.11-win_x64.zip'
        checksum = '43f0f1bdecf48ba9763d46ee7784554c95b442ffdd39ebd62dc8b297cc82e116'
    }
    zulu17WindowsArm {
        platform = 'windows-aarch64'
        url = 'https://cdn.azul.com/zulu/bin/zulu17.50.19-ca-jdk17.0.11-win_aarch64.zip'
        checksum = 'b8833d272eb31f54f8c881139807a28a74de9deae07d2cc37688ff72043e32c9'
    }
    zulu17Osx {
        platform = 'osx-x86_64'
        url = 'https://cdn.azul.com/zulu/bin/zulu17.50.19-ca-jdk17.0.11-macosx_x64.zip'
        checksum = '3f653ad00a29b3ae2abebcfc598225f674d3289e52497b310441f3fb5d785f8a'
    }
    zulu17OsxArm {
        platform = 'osx-aarch64'
        url = 'https://cdn.azul.com/zulu/bin/zulu17.50.19-ca-jdk17.0.11-macosx_aarch64.zip'
        checksum = '5aec103fc90131dc34cb1be6290dd61c426a74f1bf7e8b4895049cd27fee70a8'
    }
    graal22Osx {
        platform = 'osx-x86_64'
        url = 'https://github.com/graalvm/graalvm-ce-builds/releases/download/jdk-22.0.1/graalvm-community-jdk-22.0.1_macos-x64_bin.tar.gz'
        checksum = '553c2dff3febd45f917e45f4dd620c194d8225bc28d13f5545ddffea9eeb30f8'
    }
    graal22Linux {
        platform = 'linux-x86_64'
        url = 'https://github.com/graalvm/graalvm-ce-builds/releases/download/jdk-22.0.1/graalvm-community-jdk-22.0.1_linux-x64_bin.tar.gz'
        checksum = 'e34ec7e8e8c6a4bb99ab4fa32c3e04d01f2f2bd88920ddda7545fd35a0511f75'
    }
    graal22Windows {
        platform = 'windows-x86_64'
        url = 'https://github.com/graalvm/graalvm-ce-builds/releases/download/jdk-22.0.1/graalvm-community-jdk-22.0.1_windows-x64_bin.zip'
        checksum = '623a4c5984f1210e61346e3ff942ec6f83d1928790ef9ae7dd28067e5c8de1aa'
    }
}

jreleaser {
    dryrun = true

    environment {
        properties.put('outputDir', 'out')
        properties.put('jdkPathPrefix', 'build/jdks')
        properties.put('jdkFilePrefix', 'zulu17.50.19-ca-jdk17.0.11')
        properties.put('graalFilePrefix', 'graalvm-community-openjdk-22.0.1+8.1')
        properties.put('nativeImageDir', '{{outputDir}}/jreleaser/assemble/app-native/native-image')
        properties.put('jpackageDir', '{{outputDir}}/jreleaser/assemble/app-installer/jpackage')
        properties.put('skipJpackageResolver', true)
        properties.put('skipNativeImageResolver', true)
    }

    hooks {
        environment('KEY_GLOBAL', 'global')
        script {
            environment('KEY_SCRIPT', 'script')
            before {
                run = 'echo "{{event.name}} {{event.type}}"'
                environment('KEY_LOCAL', 'local')
                platforms = ['!windows']
            }
        }
        command {
            environment('KEY_COMMAND', 'command')
            before {
                cmd = 'echo "{{event.name}} {{event.type}}"'
                environment('KEY_LOCAL', 'local')
            }
        }
    }

    project {
        name = 'app'
        description = 'Release projects quickly and easily with JReleaser'
        description = 'Sample application'
        longDescription = 'Sample application'
        links {
            homepage = 'https://acme.com/awesome-app'
        }
        authors = ['Andres Almiray']
        license = 'Apache-2.0'
        java {
            groupId = 'com.acme'
            version = '8'
            mainClass = 'org.jreleaser.cli.Main'
        }
        inceptionYear = '2021'
        stereotype = 'cli'
        vendor = 'Kordamp'
        screenshot {
            url = 'https://jreleaser.org/images/app-full-release-command.png'
            caption = 'JReleaser in action'
        }
        icon {
            url = 'https://raw.githubusercontent.com/jreleaser/jreleaser/main/src/media/icon_256x256.png'
            width = 256
            height = 256
        }
        tags = ['tool', 'java']
    }

    platform {
        replacements.put('aarch_64', 'aarch64')
    }

    announce {
        article {
            active = 'ALWAYS'
            templateDirectory = 'src/jreleaser/templates/article'
            file {
                path = 'post.md.tpl'
            }
            repository {
                active = 'ALWAYS'
                name = 'smoketest-article'
            }
        }
        bluesky {
            active = 'ALWAYS'
            host = 'https://bsky.social'
        }
        discord {
            active = 'ALWAYS'
        }
        discourse {
            active = 'ALWAYS'
            host = 'https://discourse.acme.com'
        }
        discussions {
            active = 'ALWAYS'
            organization = 'acme'
            team = 'tools'
        }
        gitter {
            active = 'ALWAYS'
        }
        googleChat {
            active = 'ALWAYS'
        }
        linkedin {
            active = 'ALWAYS'
        }
        http {
            news {
                active = 'ALWAYS'
                url = 'https;//acme.com/news'
                authorization = 'BASIC'
            }
        }
        mail {
            active = 'ALWAYS'
            host = 'smtp.acme.com'
            auth = true
            username = 'duke'
            from = 'duke@acme.com'
        }
        mastodon {
            active = 'ALWAYS'
            host = 'https://mastodon.acme.com'
            statusTemplate = 'src/jreleaser/templates/mastodon.tpl'
        }
        mattermost {
            active = 'ALWAYS'
        }
        openCollective {
            active = 'ALWAYS'
        }
        slack {
            active = 'ALWAYS'
            channel = '#announce'
        }
        teams {
            active = 'ALWAYS'
        }
        telegram {
            active = 'ALWAYS'
        }
        twitter {
            active = 'ALWAYS'
            statusTemplate = 'src/jreleaser/templates/twitter.tpl'
        }
        webhooks {
            acme {
                active = 'ALWAYS'
            }
        }
        zulip {
            active = 'ALWAYS'
            account = 'duke@zulip.acme.com'
            apiHost = 'https://zulip.acme.com'
        }
    }

    release {
        github {
            overwrite = true
            sign = true
            discussionCategoryName = 'Announcements'
            issues {
                enabled = true
            }
            changelog {
                formatted = 'ALWAYS'
                preset = 'conventional-commits'
                contributors {
                    format = '- {{contributorName}}{{#contributorUsernameAsLink}} ({{.}}){{/contributorUsernameAsLink}}'
                }
            }
        }
    }

    signing {
        active = 'ALWAYS'
        armored = true
    }

    checksum {
        algorithm('SHA-512')
    }

    catalog {
        sbom {
            cyclonedx {
                active = 'ALWAYS'
                files = false
                pack {
                    enabled = true
                    name = '{{projectName}}-{{projectVersion}}-cyclonedx-sboms'
                }
            }
            syft {
                active = 'ALWAYS'
                files = false
                pack {
                    enabled = true
                    name = '{{projectName}}-{{projectVersion}}-syft-sboms'
                }
            }
        }
        slsa {
            active = 'ALWAYS'
        }
        swid {
            'swid-tag' {
                active = 'ALWAYS'
            }
        }
    }

    assemble {
        archive {
            mvnw {
                active = 'ALWAYS'
                attachPlatform = true
                format('ZIP')
                format('TAR')
                format('TAR_BZ2')
                format('TAR_GZ')
                format('TAR_XZ')
                format('TAR_ZST')
                format('TBZ2')
                format('TGZ')
                format('TXZ')
                artifact {
                    path = 'jreleaser.yml'
                    transform = '/META-INF/jreleaser.yml'
                }
                files {
                    pattern = 'pom.xml'
                }
                fileSet {
                    input = '.'
                    include('LICENSE')
                }
                fileSet {
                    input = '.mvn'
                    output = '.mvn'
                }
                fileSet {
                    input = '.'
                    output = 'bin'
                    include('mvnw{.cmd,}')
                }
                swid {
                    tagRef = 'swid-tag'
                }
            }
        }

        javaArchive {
            app {
                active = 'ALWAYS'
                format('ZIP')
                format('TGZ')
                fileSet {
                    input = '.'
                    include('LICENSE')
                }
                mainJar {
                    path = 'target/{{distributionName}}-{{projectVersion}}.jar'
                }
            }
        }

        jlink {
            'app-standalone' {
                active = 'ALWAYS'
                java {
                    version = '17'
                }
                imageName = '{{distributionName}}-{{projectEffectiveVersion}}'
                executable = 'app'
                jdeps {
                    multiRelease = 'base'
                    ignoreMissingDeps = true
                }
                targetJdk {
                    path = '{{jdkPathPrefix}}/zulu17Osx/{{jdkFilePrefix}}-macosx_x64/zulu-17.jdk/Contents/Home'
                    platform = 'osx-x86_64'
                }
                targetJdk {
                    path = '{{jdkPathPrefix}}/zulu17OsxArm/{{jdkFilePrefix}}-macosx_aarch64/zulu-17.jdk/Contents/Home'
                    platform = 'osx-aarch_64'
                }
                targetJdk {
                    path = '{{jdkPathPrefix}}/zulu17Linux/{{jdkFilePrefix}}-linux_x64'
                    platform = 'linux-x86_64'
                }
                targetJdk {
                    path = '{{jdkPathPrefix}}/zulu17LinuxArm/{{jdkFilePrefix}}-linux_aarch64'
                    platform = 'linux-aarch_64'
                }
                targetJdk {
                    path = '{{jdkPathPrefix}}/zulu17LinuxMusl/{{jdkFilePrefix}}-linux_musl_x64'
                    platform = 'linux_musl-x86_64'
                }
                targetJdk {
                    path = '{{jdkPathPrefix}}/zulu17LinuxMuslArm/{{jdkFilePrefix}}-linux_musl_aarch64'
                    platform = 'linux_musl-aarch_64'
                }
                targetJdk {
                    path = '{{jdkPathPrefix}}/zulu17Windows/{{jdkFilePrefix}}-win_x64'
                    platform = 'windows-x86_64'
                }
                targetJdk {
                    path = '{{jdkPathPrefix}}/zulu17WindowsArm/{{jdkFilePrefix}}-win_aarch64'
                    platform = 'windows-aarch_64'
                }
                mainJar {
                    path = 'target/app-{{projectVersion}}.jar'
                }
            }
        }

        jpackage {
            'app-installer' {
                active = 'ALWAYS'
                jlink = 'app-standalone'
                attachPlatform = true
                applicationPackage {
                    appName = 'app'
                    appVersion = '{{projectVersionNumber}}'
                    vendor = 'Acme'
                }
                osx {
                    types = ['pkg']
                    appName = 'App'
                    packageName = 'App'
                    packageIdentifier = 'com.acme.app'
                    icon = 'src/jreleaser/icons/app.icns'
                    resourceDir = 'src/app/osx'
                }
                linux {
                    types = ['deb', 'rpm']
                    maintainer = 'duke@acme.com'
                    icon = 'src/jreleaser/icons/icon_256x256.png'
                }
                windows {
                    types = ['msi']
                    console = true
                    dirChooser = true
                    icon = 'src/jreleaser/icons/app.ico'
                    resourceDir = 'src/jpackage/windows'
                }
            }
        }

        nativeImage {
            'app-native' {
                active = 'ALWAYS'
                java {
                    version = '17'
                }
                imageName = '{{distributionName}}-{{projectEffectiveVersion}}'
                executable = 'app'
                mainJar {
                    path = 'target/app-{{projectVersion}}.jar'
                }
                graalJdk {
                    path = '{{jdkPathPrefix}}/graal22Osx/{{graalFilePrefix}}/Contents/Home'
                    platform = 'osx-x86_64'
                }
                graalJdk {
                    path = '{{jdkPathPrefix}}/graal22Linux/{{graalFilePrefix}}'
                    platform = 'linux-x86_64'
                }
                graalJdk {
                    path = '{{jdkPathPrefix}}/graal22Windows/{{graalFilePrefix}}'
                    platform = 'windows-x86_64'
                }
                upx {
                    active = 'ALWAYS'
                    version = '3.96'
                }
                arg('-Duser.language=en')
                arg('-H:Optimize=2')
                arg('-H:+RemoveUnusedSymbols')
            }
        }
    }

    distributions {
        'app-uber' {
            distributionType = 'SINGLE_JAR'
            artifact {
                path = 'target/app-{{projectVersion}}.jar'
            }

            java {
                artifactId = 'app'
            }
        }

        app {
            flatpak {
                active = 'ALWAYS'
                continueOnError = true
                componentId = 'com.acme.app'
                developerName = 'Acme'
                runtime = 'FREEDESKTOP'
                runtimeVersion = '21.08'
                category('Developer Tools')
                repository {
                    active = 'RELEASE'
                    name = 'com.acme.app'
                    branch = 'master'
                }
            }
            chocolatey {
                active = 'ALWAYS'
                remoteBuild = true
                title = 'App'
                iconUrl = 'https://rawcdn.githack.com/jreleaser/jreleaser/0934fa1fa3f0bd09c0c8c39fbdeb5df2ce507457/src/media/icon_128x128.png'
                bucket {
                    active = 'RELEASE'
                    name = 'smoketests-chocolatey'
                }
            }
            jbang {
                active = 'NEVER'
            }
            macports {
                active = 'ALWAYS'
                category('devel')
                category('java')
                maintainer('@duke')
                repository {
                    active = 'RELEASE'
                    name = 'smoketests-macports'
                }
            }
            scoop {
                active = 'ALWAYS'
                bucket {
                    active = 'RELEASE'
                    name = 'smoketests-scoop'
                }
            }
            sdkman {
                active = 'RELEASE'
            }
            snap {
                active = 'ALWAYS'
                remoteBuild = true
                base = 'core18'
                architecture {
                    buildOn('amd64')
                    buildOn('arm64')
                }
            }
            spec {
                active = 'ALWAYS'
                repository {
                    active = 'RELEASE'
                    name = 'smoketests-copr'
                }
            }
            artifact {
                path = '{{outputDir}}/jreleaser/assemble/{{distributionName}}/java-archive/{{distributionName}}-{{projectVersion}}.zip'
                extraProperties.put('skipSpec', true)
            }
            artifact {
                path = '{{outputDir}}/jreleaser/assemble/{{distributionName}}/java-archive/{{distributionName}}-{{projectVersion}}.tgz'
                extraProperties.put('skipFlatpak', true)
            }
        }

        'app-standalone' {
            executable {
                name = 'app'
                windowsExtension = 'bat'
            }
            appImage {
                active = 'ALWAYS'
                continueOnError = true
                componentId = 'com.acme.app'
                developerName = 'App'
                category('Developement')
                repository {
                    active = 'RELEASE'
                    name = 'smoketests-appimage'
                    commitMessage = 'app {{tagName}}'
                }
            }
            brew {
                active = 'ALWAYS'
                formulaName = 'app'
                multiPlatform = true
                repoTap {
                    active = 'RELEASE'
                    name = 'homebrew-smoke'
                    commitMessage = 'app {{tagName}}'
                }
            }
            docker {
                active = 'ALWAYS'
                repository {
                    active = 'RELEASE'
                    commitMessage = 'app {{tagName}}'
                }
                registries {
                    DEFAULT {
                        username = 'app'
                    }
                }
                label('org.opencontainers.image.title', 'app')
                postCommand('VOLUME /workspace')
                specs {
                    slim {
                        imageName('app/app-{{dockerSpecName}}:{{tagName}}')
                        imageName('app/app-{{dockerSpecName}}:latest')
                        matcher('platform', 'linux-x86_64')
                        preCommand('ARG DEBIAN_FRONTEND=noninteractive')
                        preCommand('ENV TZ=Europe/Zurich')
                        preCommand('RUN apt-get update && apt-get install -y unzip binutils fakeroot rpm')
                    }
                    alpine {
                        imageName('app/app-{{dockerSpecName}}:{{tagName}}')
                        imageName('app/app-{{dockerSpecName}}:latest')
                        matcher('platform', 'linux_musl-x86_64')
                        preCommand('RUN apk add unzip bash')
                    }
                }
            }
            jib {
                active = 'ALWAYS'
                repository {
                    active = 'RELEASE'
                    commitMessage = 'app {{tagName}}'
                }
                registries {
                    github {
                        server = 'ghcr.io'
                    }
                }
                label('org.opencontainers.image.title', 'app')
                specs {
                    slim {
                        imageName('app/app-{{jibSpecName}}:{{tagName}}')
                        imageName('app/app-{{jibSpecName}}:latest')
                        matcher('platform', 'linux-x86_64')
                    }
                    alpine {
                        imageName('app/app-{{jibSpecName}}:{{tagName}}')
                        imageName('app/app-{{jibSpecName}}:latest')
                        matcher('platform', 'linux_musl-x86_64')
                    }
                }
            }
        }

        'app-installer' {
            winget {
                active = 'RELEASE'
                wingetPackage {
                    name = 'app'
                }
                repository {
                    active = 'ALWAYS'
                    name = 'app-winget'
                    commitMessage = 'app {{tagName}}'
                }
            }
            executable {
                name = 'app'
                windowsExtension = 'exe'
            }
            artifact {
                path = '{{jpackageDir}}/App-{{projectVersionNumber}}-osx-x86_64.pkg'
                platform = 'osx-x86_64'
            }
            artifact {
                path = '{{jpackageDir}}/app_{{projectVersionNumber}}-1_amd64.deb'
                platform = 'linux-x86_64'
            }
            artifact {
                path = '{{jpackageDir}}/app-{{projectVersionNumber}}-1.x86_64.rpm'
                platform = 'linux-x86_64'
            }
            artifact {
                path = '{{jpackageDir}}/app-{{projectVersionNumber}}-windows-x86_64.msi'
                platform = 'windows-x86_64'
            }
        }

        'app-native' {
            executable {
                name = 'app'
                windowsExtension = 'exe'
            }
            artifact {
                path = '{{nativeImageDir}}/{{distributionName}}-{{projectVersion}}-osx-x86_64.zip'
                platform = 'osx-x86_64'
            }
            artifact {
                path = '{{nativeImageDir}}/{{distributionName}}-{{projectVersion}}-linux-x86_64.zip'
                platform = 'linux-x86_64'
            }
            artifact {
                path = '{{nativeImageDir}}/{{distributionName}}-{{projectVersion}}-windows-x86_64.zip'
                platform = 'windows-x86_64'
            }
        }

        'app-flat' {
            executable {
                name = 'app'
                windowsExtension = 'bat'
            }
            artifact {
                path = 'src/flat/app'
                platform = 'osx-x86_64'
            }
            artifact {
                path = 'src/flat/app'
                platform = 'osx-aarch_64'
            }
            artifact {
                path = 'src/flat/app'
                platform = 'linux-x86_64'
            }
            artifact {
                path = 'src/flat/app'
                platform = 'linux-aarch_64'
            }
            artifact {
                path = 'src/flat/app'
                platform = 'linux_musl-x86_64'
            }
            artifact {
                path = 'src/flat/app'
                platform = 'linux_musl-aarch_64'
            }
            artifact {
                path = 'src/flat/app.bat'
                platform = 'windows-x86_64'
            }
            artifact {
                path = 'src/flat/app.bat'
                platform = 'windows-aarch_64'
            }
        }
    }

    files {
        artifact {
            path = 'LICENSE'
            extraProperties.put('skipChecksum', true)
            extraProperties.put('skipSigning', true)
        }
    }

    deploy {
        maven {
            github {
                acme {
                    active = 'ALWAYS'
                    stagingRepository('target/staging-deploy')
                }
            }

            gitlab {
                acme {
                    active = 'ALWAYS'
                    url = 'https://gitlab.com/api/v4/projects/{{projectIdentifier}}/packages/maven'
                    projectIdentifier = '12345678'
                    stagingRepository('target/staging-deploy')
                }
            }

            gitea {
                acme {
                    active = 'ALWAYS'
                    url = 'https://codeberg.org/api/packages/{{owner}}/maven'
                    stagingRepository('target/staging-deploy')
                }
            }

            mavenCentral {
                acme {
                    active = 'ALWAYS'
                    url = 'https://central.sonatype.com/api/v1/publisher'
                    stagingRepository('target/staging-deploy')
                }
            }

            nexus2 {
                acme {
                    active = 'ALWAYS'
                    url = 'https://s01.oss.sonatype.org/service/local'
                    snapshotUrl = 'https://ossrh.oss.sonatype.org/content/repositories/snapshots/'
                    closeRepository = true
                    releaseRepository = true
                    stagingRepository('target/staging-deploy')
                }
            }

            artifactory {
                acme {
                    active = 'ALWAYS'
                    url = 'https://acme.jfrog.io/artifactory/maven'
                    sign = true
                    applyMavenCentralRules = true
                    stagingRepository('target/staging-deploy')
                }
            }

            azure {
                acme {
                    active = 'ALWAYS'
                    url = 'https://pkgs.dev.azure.com/acme/_packaging/acme/maven/v1'
                    sign = true
                    applyMavenCentralRules = true
                    stagingRepository('target/staging-deploy')
                }
            }
        }
    }

    download {
        active = 'ALWAYS'
        http {
            d1 {
                asset {
                    input = 'https://github.com/jreleaser/jreleaser/raw/main/src/media/icon_256x256.png'
                    output = '{{projectName}}.png'
                }
                asset {
                    input = 'https://github.com/ixchelruiz/app/releases/download/v1.0.0/app-{{projectVersion}}.zip'
                    unpack {
                        enabled = true
                    }
                }
            }
        }

        ftp {
            d2 {
                asset {
                    input = 'upload/app.png'
                }
                asset {
                    input = 'upload/app-{{projectVersion}}.zip'
                    unpack {
                        enabled = true
                    }
                }
            }
        }

        scp {
            d3 {
                asset {
                    input = '/tmp/upload/app.png'
                    output = '{{downloaderName}}/{{artifactFile}}'
                }
                asset {
                    input = '/tmp/upload/app-{{projectVersion}}.zip'
                    unpack {
                        enabled = true
                    }
                }
            }
        }

        sftp {
            d4 {
                asset {
                    input = '/tmp/upload/app.png'
                }
                asset {
                    input = '/tmp/upload/app-{{projectVersion}}.zip'
                    unpack {
                        enabled = true
                    }
                }
            }
        }
    }

    upload {
        artifactory {
            u1 {
                active = 'ALWAYS'
                host = 'https://acme.jfrog.io/artifactory'
                repository {
                    path = 'binaries/{{projectName}}/{{projectVersion}}/{{artifactFile}}'
                }
            }
        }

        ftp {
            u2 {
                active = 'ALWAYS'
                path = 'uploads/{{projectName}}/{{tagName}}/{{artifactFile}}'
                downloadUrl ='https://download.acme.com/{{projectName}}/{{tagName}}/{{artifactFile}}'
            }
        }

        gitea {
            u3 {
                active = 'ALWAYS'
                host = 'gitea.acme.com'
                owner = 'duke'
                packageName = 'app'
            }
        }

        gitlab {
            u4 {
                active = 'ALWAYS'
                host = 'gitlab.acme.com'
                packageName = 'app'
                projectIdentifier = '12345678'
            }
        }

        http {
            u5 {
                active = 'ALWAYS'
                uploadUrl = 'https://artifacts.acme.com/{{projectName}}/{{tagName}}/{{artifactFile}}'
                downloadUrl = 'https://download.acme.com/{{projectName}}/{{tagName}}/{{artifactFile}}'
            }
        }

        s3 {
            u6 {
                active = 'ALWAYS'
            }
        }

        scp {
            u7 {
                active = 'ALWAYS'
                host = 'uploads.acme.com'
                path = '/uploads/{{projectName}}/{{tagName}}/{{artifactFile}}'
                downloadUrl = 'https://download.acme.com/{{projectName}}/{{tagName}}/{{artifactFile}}'
            }
        }

        sftp {
            u8 {
                active = 'ALWAYS'
                host = 'uploads.acme.com'
                path = '/uploads/{{projectName}}/{{tagName}}/{{artifactFile}}'
                downloadUrl = 'https://download.acme.com/{{projectName}}/{{tagName}}/{{artifactFile}}'
            }
        }
    }
}

afterEvaluate {
    ['zulu17Linux', 'zulu17LinuxArm', 'zulu17LinuxMusl', 'zulu17LinuxMuslArm',
    'zulu17Windows', 'zulu17WindowsArm', 'zulu17Osx', 'zulu17OsxArm',
    'graal22Osx', 'graal22Linux', 'graal22Windows'].each { jdk ->
        def copyTask = project.tasks.findByName('copyJdkFromCache' + jdk.capitalize())
        if (copyJdksToCache && copyTask) copyTask.dependsOn(copyJdksToCache)
    }
}